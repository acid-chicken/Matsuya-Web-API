// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Matsuya-Web-API": v4 Resource Client
//
// Command:
// $ goagen
// --design=github.com/makotia/Matsuya-Web-API/design
// --out=$(GOPATH)/src/github.com/makotia/Matsuya-Web-API
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// RandomV4Path computes a request path to the random action of v4.
func RandomV4Path() string {

	return fmt.Sprintf("/v4/random")
}

// ランダムで松屋のメニュー名を返す
func (c *Client) RandomV4(ctx context.Context, path string, name *string, type_ *string) (*http.Response, error) {
	req, err := c.NewRandomV4Request(ctx, path, name, type_)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRandomV4Request create the request corresponding to the random action endpoint of the v4 resource.
func (c *Client) NewRandomV4Request(ctx context.Context, path string, name *string, type_ *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if name != nil {
		values.Set("name", *name)
	}
	if type_ != nil {
		values.Set("type", *type_)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// SearchV4Path computes a request path to the search action of v4.
func SearchV4Path() string {

	return fmt.Sprintf("/v4/search")
}

// ランダムで松屋のメニュー名を返す
func (c *Client) SearchV4(ctx context.Context, path string, name *string, type_ *string) (*http.Response, error) {
	req, err := c.NewSearchV4Request(ctx, path, name, type_)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSearchV4Request create the request corresponding to the search action endpoint of the v4 resource.
func (c *Client) NewSearchV4Request(ctx context.Context, path string, name *string, type_ *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if name != nil {
		values.Set("name", *name)
	}
	if type_ != nil {
		values.Set("type", *type_)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
