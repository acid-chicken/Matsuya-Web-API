// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Matsuya-Web-API": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/makotia/Matsuya-Web-API/design
// --out=$(GOPATH)/src/github.com/makotia/Matsuya-Web-API
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// RandomV1Context provides the v1 random action context.
type RandomV1Context struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewRandomV1Context parses the incoming request URL and body, performs validations and creates the
// context used by the v1 controller random action.
func NewRandomV1Context(ctx context.Context, r *http.Request, service *goa.Service) (*RandomV1Context, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RandomV1Context{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RandomV1Context) OK(r []string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// RandomV2Context provides the v2 random action context.
type RandomV2Context struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewRandomV2Context parses the incoming request URL and body, performs validations and creates the
// context used by the v2 controller random action.
func NewRandomV2Context(ctx context.Context, r *http.Request, service *goa.Service) (*RandomV2Context, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RandomV2Context{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RandomV2Context) OK(r *MeMakotiaMatsuyaV2) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.me.makotia.matsuya.v2+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// RandomV3Context provides the v3 random action context.
type RandomV3Context struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewRandomV3Context parses the incoming request URL and body, performs validations and creates the
// context used by the v3 controller random action.
func NewRandomV3Context(ctx context.Context, r *http.Request, service *goa.Service) (*RandomV3Context, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RandomV3Context{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RandomV3Context) OK(r *MeMakotiaMatsuyaV3) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.me.makotia.matsuya.v3+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// RandomV4Context provides the v4 random action context.
type RandomV4Context struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name *string
	Type *string
}

// NewRandomV4Context parses the incoming request URL and body, performs validations and creates the
// context used by the v4 controller random action.
func NewRandomV4Context(ctx context.Context, r *http.Request, service *goa.Service) (*RandomV4Context, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RandomV4Context{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = &rawName
	}
	paramType := req.Params["type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RandomV4Context) OK(r *MeMakotiaMatsuyaRandom) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.me.makotia.matsuya.random+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// SearchV4Context provides the v4 search action context.
type SearchV4Context struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name *string
	Type *string
}

// NewSearchV4Context parses the incoming request URL and body, performs validations and creates the
// context used by the v4 controller search action.
func NewSearchV4Context(ctx context.Context, r *http.Request, service *goa.Service) (*SearchV4Context, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SearchV4Context{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = &rawName
	}
	paramType := req.Params["type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		rctx.Type = &rawType
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SearchV4Context) OK(r []*MeMakotiaMatsuyaRandom) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
